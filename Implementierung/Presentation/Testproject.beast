<projectName>
Testproject
</projectName>
<electionDescription>
<electionName>
singleChoice
</electionName>
<votingDecLine>
2
</votingDecLine>
<code>
//Single-choice: Wähler stimmt jeweils für einen Kandidaten
//Single-choice: Ein gewählter Kandidat oder unentschieden
unsigned int voting(unsigned int votes[V]) { 
    unsigned int res[C];
    unsigned int i = 0;

    for (i = 0; i < C; i++) {
        res[i] = 0;
    }
    for (i = 0; i < V; i++) {
        res[votes[i]]++;
    }
    unsigned int max = 0;
    unsigned int elect = 0;
    for (i = 0; i < C; i++) {
        if (max < res[i]) {
            max = res[i];
            elect = i;
        } else {
            if (max == res[i]) {
                elect = C;
            }
        }
    }
    return elect
} 

</code>
<inputType>
one_candidate_per_voter
</inputType>
<outputType>
one_candidate_or_zero
</outputType>

</electionDescription>
<propertyList>
<propertyListName>
New PropertyList
</propertyListName>
<propertyItem>
<postAndPreProps>
<postAndPrePropsName>
Eigenschaft 0
</postAndPrePropsName>
<pre>
FOR_ALL_VOTERS(v) : VOTES1(v) == s;
</pre>
<post>
FOR_ALL_CANDIDATES(c) : (VOTE_SUM_FOR_CANDIDATE1(c) == VOTE_SUM_FOR_CANDIDATE2(c) );
</post>
<varlist>
symbolic_variable: id: s type: SEAT;

</varlist>

</postAndPreProps>
<testStatus>
false
</testStatus>

</propertyItem>

</propertyList>
<electionCheckParameter>
<amountVotersMin>
2
</amountVotersMin>
<amountVotersMax>
2
</amountVotersMax>
<amountCandidatesMin>
2
</amountCandidatesMin>
<amountCandidatesMax>
2
</amountCandidatesMax>
<amountSeatsMin>
1
</amountSeatsMin>
<amountSeatsMax>
1
</amountSeatsMax>
<timeout>
<duration>
6000
</duration>
<timeunit>
SECONDS
</timeunit>

</timeout>
<processes>
0
</processes>
<argument>

</argument>

</electionCheckParameter>
